{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","temp","setTemp","max","setmax","stringToStart","setStringToStart","rap","setRap","wait","setWait","count","setCount","tick","prevState","timer","setInterval","clearInterval","useEffect","axios","get","then","res","data","ready","content","className","TextField","id","label","type","InputLabelProps","shrink","onChange","e","currentTarget","value","variant","Button","onClick","console","log","post","string_to_start","max_length","temperature","color","height","width","visible","split","map","item","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAuGeA,MAhGf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAESF,mBAAS,GAFlB,mBAENG,EAFM,KAEDC,EAFC,OAG6BJ,mBAAS,IAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAISN,mBAAS,IAJlB,mBAINO,EAJM,KAIDC,EAJC,OAKWR,oBAAS,GALpB,mBAKNS,EALM,KAKAC,EALA,OAMaV,mBAAS,GANtB,mBAMNW,EANM,KAMCC,EAND,KAOPC,EAAO,WACXD,GAAS,SAACE,GAAD,OAAgBA,EAAY,GAAKA,EAAY,EAAI,MAGxDC,EAAQC,aAAY,kBAAMH,MAAQ,KAkCtC,OAjCAI,cAAcF,GAmBdG,qBAAU,WACM,IAAVP,GAAeF,GACjBU,IAAMC,IAAI,sCAAsCC,MAAK,SAACC,GAChDA,EAAIC,KAAKC,QACXP,cAAcF,GACdP,EAAOc,EAAIC,KAAKhB,KAChBG,GAAQ,IAENY,GAAOA,EAAIG,aAIlB,CAACd,EAAOF,EAAKM,IAGd,qBAAKW,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,2IACA,cAACC,EAAA,EAAD,CACEC,GAAG,kBACHC,MAAM,aACNC,KAAK,SACLC,gBAAiB,CACfC,QAAQ,GAEVC,SAAU,SAACC,GAAD,OAAO9B,EAAO8B,EAAEC,cAAcC,UAE1C,2YACA,cAACT,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,OACNC,KAAK,SACLO,QAAQ,SACRJ,SAAU,SAACC,GAAD,OAAOhC,EAAQgC,EAAEC,cAAcC,UAG3C,cAACT,EAAA,EAAD,CACEC,GAAG,gBACHC,MAAM,gEACNC,KAAK,SACLO,QAAQ,SACRJ,SAAU,SAACC,GAAD,OAAO5B,EAAiB4B,EAAEC,cAAcC,UAEpD,cAACE,EAAA,EAAD,CAAQD,QAAQ,YAAYE,QAAS,kBA3DzCC,QAAQC,IAAIpC,GACZmC,QAAQC,IAAItC,GACZqC,QAAQC,IAAIxC,QACZkB,IACGuB,KADH,uCACgD,CAC5CC,gBAAiBtC,EACjBuC,WAAYzC,EACZ0C,YAAa5C,IAEdoB,MAAK,SAACC,GACLkB,QAAQC,IAAInB,GAEZZ,GAAQ,GACRK,EAAQC,aAAY,kBAAMH,MAAQ,SA8ClC,oBAGA,cAAC,IAAD,CAAQiB,KAAK,OAAOgB,MAAM,UAAUC,OAAQ,GAAIC,MAAO,GAAIC,QAASxC,IACpE,qBAAKiB,UAAU,MAAf,SACA,+BACG,IACAnB,EAAI2C,MAAM,MAAMC,KAAI,SAACC,EAAMC,GAC1B,OACE,iCACGD,EACD,yBAFSC,iBC9EVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.525ca400.chunk.js","sourcesContent":["import Loader from \"react-loader-spinner\";\nimport \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [temp, setTemp] = useState(0);\n  const [max, setmax] = useState(0);\n  const [stringToStart, setStringToStart] = useState(\"\");\n  const [rap, setRap] = useState(\"\");\n  const [wait, setWait] = useState(false);\n  const [count, setCount] = useState(0);\n  const tick = () => {\n    setCount((prevState) => (prevState < 15 ? prevState + 1 : 0));\n  };\n\n  let timer = setInterval(() => tick(), 1000);\n  clearInterval(timer);\n\n  function submit() {\n    console.log(stringToStart);\n    console.log(max);\n    console.log(temp);\n    axios\n      .post(`https://mcnlp.herokuapp.com/generate`, {\n        string_to_start: stringToStart,\n        max_length: max,\n        temperature: temp,\n      })\n      .then((res) => {\n        console.log(res);\n        // setRap(res.data.rap)\n        setWait(true);\n        timer = setInterval(() => tick(), 1000);\n      });\n  }\n  useEffect(() => {\n    if (count === 0 && wait) {\n      axios.get(\"https://mcnlp.herokuapp.com/getres\").then((res) => {\n        if (res.data.ready) {\n          clearInterval(timer);\n          setRap(res.data.rap);\n          setWait(false);\n        }\n        if (res && res.content) {\n        }\n      });\n    }\n  }, [count, wait,timer]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>אורך מקסימלי (בתווים)</p>\n        <TextField\n          id=\"standard-number\"\n          label=\"max length\"\n          type=\"number\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={(e) => setmax(e.currentTarget.value)}\n        />\n        <h7>ככל שהטמפרטורה גבוהה יותר נקבל טקסט מגוון יותר, ניתן לשחק עם הפרמטר הזה</h7>\n        <TextField\n          id=\"filled-search\"\n          label=\"temp\"\n          type=\"search\"\n          variant=\"filled\"\n          onChange={(e) => setTemp(e.currentTarget.value)}\n        />\n\n        <TextField\n          id=\"filled-search\"\n          label=\"שורה להתחלה\"\n          type=\"search\"\n          variant=\"filled\"\n          onChange={(e) => setStringToStart(e.currentTarget.value)}\n        />\n        <Button variant=\"contained\" onClick={() => submit()}>\n          Submit\n        </Button>\n        <Loader type=\"Oval\" color=\"#00BFFF\" height={80} width={80} visible={wait}/>\n        <div className=\"rap\">\n        <h6>\n          {\" \"}\n          {rap.split(\"\\n\").map((item, key) => {\n            return (\n              <span key={key}>\n                {item}\n                <br />\n              </span>\n            );\n          })}\n        </h6>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}